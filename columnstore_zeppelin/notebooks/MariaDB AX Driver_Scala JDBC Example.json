{"paragraphs":[{"text":"%md\n## Scala JDBC Example\n### Insert through JDBC\nVariables to connect to MariaDB ColumnStore throuhg JDBC are set and a SparkContext is initiated.","user":"buff","dateUpdated":"2018-12-14T16:41:12+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Scala JDBC Example</h2>\n<h3>Insert through JDBC</h3>\n<p>Variables to connect to MariaDB ColumnStore throuhg JDBC are set and a SparkContext is initiated.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1544805672972_-1604881011","id":"20180724-150408_714219319","dateCreated":"2018-12-14T16:41:12+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:24301"},{"text":"import java.util.Properties\nimport org.apache.spark.sql.SQLContext\n\nval url = \"jdbc:mysql://{{columnstore_host_nm}}:3306/test\".replace(\"{\",\"\").replace(\"}\",\"\")\n\nvar connectionProperties = new Properties()\nconnectionProperties.put(\"user\", \"zeppelin_user\")\nconnectionProperties.put(\"password\", \"zeppelin_pass\")\nconnectionProperties.put(\"driver\", \"org.mariadb.jdbc.Driver\")\n\nval sqlContext = new SQLContext(sc)\nimport sqlContext.implicits._\n","user":"buff","dateUpdated":"2018-12-14T16:41:12+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import java.util.Properties\nimport org.apache.spark.sql.SQLContext\nurl: String = jdbc:mysql://columnstore_host_nm:3306/test\nconnectionProperties: java.util.Properties = {}\nres38: Object = null\nres39: Object = null\nres40: Object = null\nwarning: there was one deprecation warning; re-run with -deprecation for details\nsqlContext: org.apache.spark.sql.SQLContext = org.apache.spark.sql.SQLContext@4dbb1804\nimport sqlContext.implicits._\n"}]},"apps":[],"jobName":"paragraph_1544805672988_-574041872","id":"20180724-092511_1706672733","dateCreated":"2018-12-14T16:41:12+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:24302"},{"text":"%md\nA sample DataFrame is created, that shows numbers and their ASCII representation,","user":"buff","dateUpdated":"2018-12-14T16:41:12+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>A sample DataFrame is created, that shows numbers and their ASCII representation,</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1544805672995_1804756732","id":"20180724-150653_1887728845","dateCreated":"2018-12-14T16:41:12+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:24303"},{"text":"val sampleDF = sc.makeRDD(0 to 127).map(i => (i, i.toChar.toString)).toDF(\"number\", \"ASCII_representation\")\nsampleDF.printSchema()\nsampleDF.registerTempTable(\"df\")\nsqlContext.sql(\"SELECT number, ASCII_representation from df WHERE number > 64 LIMIT 10\").show()","user":"buff","dateUpdated":"2018-12-14T16:41:13+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"sampleDF: org.apache.spark.sql.DataFrame = [number: int, ASCII_representation: string]\nroot\n |-- number: integer (nullable = false)\n |-- ASCII_representation: string (nullable = true)\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n+------+--------------------+\n|number|ASCII_representation|\n+------+--------------------+\n|    65|                   A|\n|    66|                   B|\n|    67|                   C|\n|    68|                   D|\n|    69|                   E|\n|    70|                   F|\n|    71|                   G|\n|    72|                   H|\n|    73|                   I|\n|    74|                   J|\n+------+--------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1544805672997_1406082798","id":"20180724-093907_1361016737","dateCreated":"2018-12-14T16:41:12+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:24304"},{"text":"%md\nand is inserted into MariaDB CoumnStore through JDBC in database \"test\" table \"scalaexample\".","user":"buff","dateUpdated":"2018-12-14T16:41:13+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>and is inserted into MariaDB CoumnStore through JDBC in database &ldquo;test&rdquo; table &ldquo;scalaexample&rdquo;.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1544805673000_1438126997","id":"20180724-150810_111487792","dateCreated":"2018-12-14T16:41:13+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:24305"},{"text":"try {\nsampleDF.write.mode(\"overwrite\").\n  option(\"numPartitions\", 1).\n  option(\"createTableOptions\", \"ENGINE=columnstore\").\n  option(\"createTableColumnTypes\", \"number INT, ASCII_representation CHAR(1)\").\n  jdbc(url, \"test.scalaexample\", connectionProperties)\n} catch  {\n    case e: java.sql.SQLSyntaxErrorException => System.out.println(\"Table exists\")\n}","user":"buff","dateUpdated":"2018-12-14T16:41:13+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1544805673001_-9334107","id":"20180724-093930_380907260","dateCreated":"2018-12-14T16:41:13+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:24306"},{"text":"%md\n### Insert through native ColumnStore API (bulk insert)\nVariables to connect to MariaDB ColumnStore through the native ColumnStore API are already set in /usr/local/mariadb/columnstore/etc/Columnstore.xml.\nThe necessary library is loaded, the ColumnStoreDriver is instantiated, and table \"scalaexample\" in database \"test\" is set for the bulk insert.","user":"buff","dateUpdated":"2018-12-14T16:41:13+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Insert through native ColumnStore API (bulk insert)</h3>\n<p>Variables to connect to MariaDB ColumnStore through the native ColumnStore API are already set in /usr/local/mariadb/columnstore/etc/Columnstore.xml.<br/>The necessary library is loaded, the ColumnStoreDriver is instantiated, and table &ldquo;scalaexample&rdquo; in database &ldquo;test&rdquo; is set for the bulk insert.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1544805673001_1508279733","id":"20180724-151250_172347146","dateCreated":"2018-12-14T16:41:13+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:24307"},{"text":"import com.mariadb.columnstore.api.ColumnStoreDriver\n\nval d = new ColumnStoreDriver();\nvar b = d.createBulkInsert(\"test\", \"scalaexample\", 0, 0);","user":"buff","dateUpdated":"2018-12-14T16:41:13+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import com.mariadb.columnstore.api.ColumnStoreDriver\nd: com.mariadb.columnstore.api.ColumnStoreDriver = com.mariadb.columnstore.api.ColumnStoreDriver@7039e261\nb: com.mariadb.columnstore.api.ColumnStoreBulkInsert = com.mariadb.columnstore.api.ColumnStoreBulkInsert@318b4449\n"}]},"apps":[],"jobName":"paragraph_1544805673001_1321598520","id":"20180724-093929_926998582","dateCreated":"2018-12-14T16:41:13+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:24308"},{"text":"%md\nData is inserted into ColumnStore.","user":"buff","dateUpdated":"2018-12-14T16:41:13+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Data is inserted into ColumnStore.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1544805673002_1150605856","id":"20180724-143539_1671033100","dateCreated":"2018-12-14T16:41:13+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:24309"},{"text":"for (row <- sampleDF.collect()){\n    b.setColumn(0, row.getInt(0))\n    b.setColumn(1, row.getString(1))\n    b.writeRow()\n}\nb.commit()","user":"buff","dateUpdated":"2018-12-14T16:41:13+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1544805673002_-1100823314","id":"20180724-151713_1607872584","dateCreated":"2018-12-14T16:41:13+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:24310"},{"text":"%md\nFinally, a summary of the insert process is shown.","user":"buff","dateUpdated":"2018-12-14T16:41:13+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Finally, a summary of the insert process is shown.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1544805673003_1552467369","id":"20180724-151725_862282306","dateCreated":"2018-12-14T16:41:13+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:24311"},{"text":"val summary = b.getSummary()\nprintln(\"Execution time: \" + summary.getExecutionTime())\nprintln(\"Rows inserted: \" + summary.getRowsInsertedCount())\nprintln(\"Truncation count: \" + summary.getTruncationCount())\nprintln(\"Saturated count: \" + summary.getSaturatedCount())\nprintln(\"Invalid count: \" + summary.getInvalidCount())","user":"buff","dateUpdated":"2018-12-14T16:41:13+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"summary: com.mariadb.columnstore.api.ColumnStoreSummary = com.mariadb.columnstore.api.ColumnStoreSummary@52f9cb39\nExecution time: 1.27266969\nRows inserted: 128\nTruncation count: 1\nSaturated count: 0\nInvalid count: 0\n"}]},"apps":[],"jobName":"paragraph_1544805673003_31753935","id":"20180724-151651_61429611","dateCreated":"2018-12-14T16:41:13+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:24312"},{"text":"%md\nFinally, a summary of the insert process is shown.","user":"buff","dateUpdated":"2018-12-14T16:41:13+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Finally, a summary of the insert process is shown.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1544805673004_1100985544","id":"20180724-153048_1522486851","dateCreated":"2018-12-14T16:41:13+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:24313"},{"text":"val summary = b.getSummary()\nprintln(\"Execution time: \" + summary.getExecutionTime())\nprintln(\"Rows inserted: \" + summary.getRowsInsertedCount())\nprintln(\"Truncation count: \" + summary.getTruncationCount())\nprintln(\"Saturated count: \" + summary.getSaturatedCount())\nprintln(\"Invalid count: \" + summary.getInvalidCount())","user":"buff","dateUpdated":"2018-12-14T16:41:13+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"summary: com.mariadb.columnstore.api.ColumnStoreSummary = com.mariadb.columnstore.api.ColumnStoreSummary@7cddc957\nExecution time: 1.27266969\nRows inserted: 128\nTruncation count: 1\nSaturated count: 0\nInvalid count: 0\n"}]},"apps":[],"jobName":"paragraph_1544805673004_1760038221","id":"20180724-153130_1014233875","dateCreated":"2018-12-14T16:41:13+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:24314"},{"text":"%md\n### Insert through custom function and ColumnStore API (automatic type detection)¶\nRequires an existing table with a corresponding schema.","user":"buff","dateUpdated":"2018-12-14T16:41:13+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Insert through custom function and ColumnStore API (automatic type detection)¶</h3>\n<p>Requires an existing table with a corresponding schema.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1544805673004_661912628","id":"20180724-153140_2072086550","dateCreated":"2018-12-14T16:41:13+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:24315"},{"text":"import com.mariadb.columnstore.api.{ColumnStoreDriver,ColumnStoreDecimal,columnstore_data_types_t}\nimport org.apache.spark.sql.{Row,DataFrame}\nimport java.math.BigInteger\n\nobject ColumnStoreExporter {\n  def export( database: String, table: String, df: DataFrame ) : Unit = {\n    val rows = df.collect()\n    val driver = new ColumnStoreDriver()\n    val bulkInsert = driver.createBulkInsert(database, table, 0, 0)\n\n    // get the column count of table\n    val dbCatalog = driver.getSystemCatalog\n    val dbTable = dbCatalog.getTable(database, table)\n    val dbTableColumnCount = dbTable.getColumnCount\n\n    // insert row by row into table\n    try {\n      for (row <- rows){\n        for (columnId <- 0 until row.size){\n          if (columnId < dbTableColumnCount){\n            row.get(columnId) match {\n              case input:Boolean => if (input) bulkInsert.setColumn(columnId, 1)\n              else bulkInsert.setColumn(columnId, 0);\n              case input:Byte => bulkInsert.setColumn(columnId, input)\n              case input:java.sql.Date => bulkInsert.setColumn(columnId, input.toString)\n              case input:java.math.BigDecimal =>\n                val dbColumn = dbTable.getColumn(columnId)\n                if (dbColumn.getType.equals(columnstore_data_types_t.DATA_TYPE_DECIMAL) ||\n                  dbColumn.getType.equals(columnstore_data_types_t.DATA_TYPE_UDECIMAL) ||\n                  dbColumn.getType.equals(columnstore_data_types_t.DATA_TYPE_FLOAT) ||\n                  dbColumn.getType.equals(columnstore_data_types_t.DATA_TYPE_UFLOAT) ||\n                  dbColumn.getType.equals(columnstore_data_types_t.DATA_TYPE_DOUBLE) ||\n                  dbColumn.getType.equals(columnstore_data_types_t.DATA_TYPE_UDOUBLE)){\n                  \n                  bulkInsert.setColumn(columnId, new ColumnStoreDecimal(input.toPlainString))\n                }\n                else {\n                  bulkInsert.setColumn(columnId, input.toBigInteger)\n                }\n              case input:Double => bulkInsert.setColumn(columnId, input)\n              case input:Float => bulkInsert.setColumn(columnId, input)\n              case input:Integer => bulkInsert.setColumn(columnId, input)\n              case input:Long => bulkInsert.setColumn(columnId, input)\n              case input:Short => bulkInsert.setColumn(columnId, input)\n              case input:String => bulkInsert.setColumn(columnId, input)\n              case input:java.sql.Timestamp => bulkInsert.setColumn(columnId, input.toString)\n              case _ => throw new Exception(\"Parsing error, can't convert \" +  row.get(columnId).getClass + \".\")\n            }\n          }\n        }\n        bulkInsert.writeRow()\n      }\n      bulkInsert.commit()\n    }\n    catch {\n      case e: Exception => bulkInsert.rollback(); e.printStackTrace();\n    }\n    finally{ // print a short summary of the insertion process\n      val summary = bulkInsert.getSummary\n      println(\"Execution time: \" + summary.getExecutionTime)\n      println(\"Rows inserted: \" + summary.getRowsInsertedCount)\n      println(\"Truncation count: \" + summary.getTruncationCount)\n      println(\"Saturated count: \" + summary.getSaturatedCount)\n      println(\"Invalid count: \" + summary.getInvalidCount)\n    }\n  }\n}","user":"buff","dateUpdated":"2018-12-14T16:41:13+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import com.mariadb.columnstore.api.{ColumnStoreDriver, ColumnStoreDecimal, columnstore_data_types_t}\nimport org.apache.spark.sql.{Row, DataFrame}\nimport java.math.BigInteger\ndefined object ColumnStoreExporter\n"}]},"apps":[],"jobName":"paragraph_1544805673005_-1887577896","id":"20180724-153205_1350413407","dateCreated":"2018-12-14T16:41:13+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:24316"},{"text":"ColumnStoreExporter.export(\"test\",\"scalaexample\",sampleDF)","user":"buff","dateUpdated":"2018-12-14T16:41:13+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Execution time: 0.196466468\nRows inserted: 128\nTruncation count: 1\nSaturated count: 0\nInvalid count: 0\n"}]},"apps":[],"jobName":"paragraph_1544805673005_1350316292","id":"20180724-153243_952656178","dateCreated":"2018-12-14T16:41:13+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:24317"},{"user":"buff","dateUpdated":"2018-12-14T16:41:13+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544805673005_-2103310220","id":"20180724-153312_1458776363","dateCreated":"2018-12-14T16:41:13+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:24318"}],"name":"MariaDB AX Driver/Scala JDBC Example","id":"2DY41YJ36","noteParams":{},"noteForms":{},"angularObjects":{},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}